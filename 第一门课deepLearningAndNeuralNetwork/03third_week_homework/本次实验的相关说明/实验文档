  在开始之前，我们简单说一下我们要做什么。我们要建立一个神经网络，它有一个隐藏层。
    你会发现这个模型和上一个逻辑回归实现的模型有很大的区别。
    你可以跟随我的步骤在Jupyter Notebook中一步步地把代码填进去，
    也可以直接复制完整代码，在完整代码在本文底部，
    testCases.py和planar_utils.py的完整代码也在最底部。在这篇文章中，我们会讲到以下的知识：

        构建具有单隐藏层的2类分类神经网络。
        使用具有非线性激活功能激活函数，例如tanh。
        计算交叉熵损失（损失函数）。
        实现向前和向后传播。

准备软件包

我们需要准备一些软件包：

    numpy：是用Python进行科学计算的基本软件包。
    sklearn：为数据挖掘和数据分析提供的简单高效的工具。
    matplotlib ：是一个用于在Python中绘制图表的库。
    testCases：提供了一些测试示例来评估函数的正确性，参见下载的资料或者在底部查看它的代码。
    planar_utils ：提供了在这个任务中使用的各种有用的功能，参见下载的资料或者在底部查看它的代码。

1.加载和查看数据集
1.1加载
首先，我们来看看我们将要使用的数据集，
下面的代码会将一个花的图案的2类数据集加载到变量X和Y中。
 把数据集加载完成了，然后使用matplotlib可视化数据集.  

1.2数据看起来像一朵红色（y = 0）和一些蓝色（y = 1）的数据点的花朵的图案。
我们的目标是建立一个模型来适应这些数据。现在，我们已经有了以下的东西：

    X：一个numpy的矩阵，包含了这些数据点的数值
    Y：一个numpy的向量，对应着的是X的标签【0 | 1】（红色:0 ， 蓝色 :1）

2.查看简单的Logistic回归的分类效果

  在构建完整的神经网络之前，先让我们看看逻辑回归在这个问题上的表现如何，
我们可以使用sklearn的内置函数来做到这一点， 运行下面的代码来训练数据集上的逻辑回归分类器。

#关于这点在为logistic回归绘制决策边界的代码我不懂

3.在你将训练带有单个隐藏层的神经网络。
    建立神经网络的一般方法是：
    1.定义神经网络结构（输入单元数，隐藏单元数等）。
    2.初始化模型的参数
    3.循环：
        实现前向传播
        计算损失
        后向传播以获得梯度
        更新参数（梯度下降）

    我们通常会构建辅助函数来计算第1-3步，然后将它们合并为nn_model()函数。
    一旦构建了nn_model()并学习了正确的参数，就可以对新数据进行预测。

3.1定义神经网络结构
：定义三个变量：
     - n_x：输入层的大小
     - n_h：隐藏层的大小（将其设置为4）
     - n_y：输出层的大小

提示：使用shape来找到n_x和n_y。 另外，将隐藏层大小硬编码为4。

3.2初始化参数
练习：实现函数 initialize_parameters()。

说明：

    请确保参数大小正确。 如果需要，也可参考上面的神经网络图。
    使用随机值初始化权重矩阵。
         - 使用：np.random.randn（a，b）* 0.01随机初始化维度为（a，b）的矩阵。
    将偏差向量初始化为零。
         - 使用：np.zeros((a,b)) 初始化维度为（a，b）零的矩阵。

3.3制作循环
        3.3.1 实现前向传播
        3.3.2计算损失
        3.3.3后向传播以获得梯度
        3.3.4更新参数（梯度下降）
        3.3.5集成nn_model()
        ·制作四个函数，最后将其集成到nn_model()函数中


4.
问题：使用你的模型通过构建predict()函数进行预测。
使用正向传播来预测结果。
即设定
激活函数A2
    大于0.5则判断为blue
    小于0.5判断为red

5.现在运行模型以查看其如何在二维数据集上运行。
运行以下代码以使用含有隐藏单元的单个隐藏层测试模型。

5.2
    较大的模型（具有更多隐藏的单元）能够更好地拟合训练集，直到最终最大的模型过拟合数据为止。
    隐藏层的最佳大小似乎在n_h = 5左右。的确，此值似乎很好地拟合了数据，而又不会引起明显的过度拟合。
    稍后你还将学习正则化，帮助构建更大的模型（例如n_h = 50）而不会过度拟合。

6.
    将tanh激活函数更改为sigmoid或ReLU会发生什么？
    调整学习率会发生什么？
    如果我们更改数据集该怎么办？

  6.1模型在其他数据集上的性能
























