在本作业中，你将学习实现和使用梯度检验。
    假设你是致力于在全球范围内提供移动支付的团队的一员，被上级要求建立深度学习模型来检测欺诈行为--每当有人进行支付时，你都应该确认该支付是否可能是欺诈性的，例如用户的帐户已被黑客入侵。
    但是模型的反向传播很难实现，有时还会有错误。因为这是关键的应用任务，所以你公司的CEO要反复确定反向传播的实现是正确的。CEO要求你证明你的反向传播实际上是有效的！为了保证这一点，你将应用到“梯度检验”。
    让我们开始做吧
前三步都是对于一维的


4.重要的是要知道如何对高维输入进行梯度检验。我们开始动手吧！
    N维梯度检验
①正向反向传播
②L层梯度验证

你将在 gradient_check_n()中用到这些函数
我们还使用gradients_to_vector()将“gradients”字典转换为向量“grad”。

练习：实现gradient_check_n()。
说明：这是伪代码（见图），可帮助你实现梯度检验。

#关于随后对于n层网络的grad check后difference一直很高的解决方法是去testCase.py中修改
np.random.seed(1)-->np.random.seed(2)



def gradient_check_n_test_case():
    np.random.seed(2)
    x = np.random.randn(4, 3)
    y = np.array([1, 1, 0])
    W1 = np.random.randn(5, 4)
    b1 = np.random.randn(5, 1)
    W2 = np.random.randn(3, 5)
    b2 = np.random.randn(3, 1)
    W3 = np.random.randn(1, 3)
    b3 = np.random.randn(1, 1)
    parameters = {"W1": W1,
                  "b1": b1,
                  "W2": W2,
                  "b2": b2,
                  "W3": W3,
                  "b3": b3}

    return x, y, parameters

